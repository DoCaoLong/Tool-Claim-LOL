import colors from "colors";
import * as ethers from "ethers";
import dotenv from "dotenv";

// Load environment variables from .env file
dotenv.config();
// T·ªïng s·ªë l·∫ßn ch·∫°y (m·ªói l·∫ßn ch·∫°y s·∫Ω t·ª± ƒë·ªông t·∫°o v√≠ m·ªõi, t·ª± ƒë·ªông chuy·ªÉn bnb t·ª´ v√≠ cha t·ª± claim token lol r·ªìi chuy·ªÉn v·ªÅ v√≠ cha)
const COUNT = 100;
// S·ªë BNB chuy·ªÉn qua ƒë·ªÉ claim + chuy·ªÉn token v·ªÅ v√≠ v·ªá tinh
const AMOUNT_SEND = "0.000001";
// Private key c·ªßa v√≠ v·ªá tinh (v√≠ ch·ª©a BNB m·∫°ng Matchain ƒë·ªÉ chia gas cho c√°c v√≠)
const PRIVATE_KEY = process.env.PRIVATE_KEY;
// ƒê·ªãa ch·ªâ (m·∫°ng Matchain) c·ªßa v√≠ v·ªá tinh ho·∫∑c b·∫•t k·ª≥ v√≠ n√†o b·∫°n mu·ªën gom token v·ªÅ
const PARENT_WALLET_ADDRESS = process.env.PARENT_WALLET_ADDRESS;

if (!PRIVATE_KEY || !PARENT_WALLET_ADDRESS) {
    console.error(
        "PRIVATE_KEY v√† PARENT_WALLET_ADDRESS ph·∫£i ƒë∆∞·ª£c cung c·∫•p trong t·ªáp .env"
    );
    process.exit(1);
}

process.on("unhandledRejection", (reason, promise) => {
    console.error("Unhandled Rejection at:", promise, "reason:", reason);
});

const provider = new ethers.JsonRpcProvider("https://rpc.matchain.io");

function create() {
    const wallet = ethers.Wallet.createRandom();
    console.log(`T·∫°o th√†nh c√¥ng v√≠: ${colors.blue(wallet.address)}`);

    return {
        address: wallet.address,
        privateKey: wallet.privateKey,
        mnemonic: wallet.mnemonic?.phrase,
    };
}

async function send(data, privateKey, amount) {
    if (!privateKey) {
        console.error("Vui l√≤ng cung c·∫•p PRIVATE_KEY");
        process.exit(1);
    }

    const wallet = new ethers.Wallet(privateKey, provider);

    // S·ªë l∆∞·ª£ng BNB c·∫ßn g·ª≠i cho m·ªói ƒë·ªãa ch·ªâ
    const amountToSend = ethers.parseEther(amount);

    console.log(`B·∫Øt ƒë·∫ßu g·ª≠i ${amount} BNB ƒë·∫øn v√≠ v·ª´a t·∫°o`);
    try {
        const tx = await wallet.sendTransaction({
            to: data.address,
            value: amountToSend,
        });
        console.log(`Transaction hash: ${tx.hash}`);
        await tx.wait();
        console.log(colors.green("G·ª≠i BNB th√†nh c√¥ng"));
    } catch (error) {
        console.log(
            colors.red(`L·ªói g·ª≠i BNB ƒë·∫øn ${data.address}:`, error.message)
        );
    }
    console.log("-----------------------------------");
}

async function claim(data) {
    const CONTRACT_ADDRESS = "0xD5B3BC210352D71f9c7fe7d94cb86FC49B42209a";

    const ABI = ["function claim()"];
    const contract = new ethers.Contract(CONTRACT_ADDRESS, ABI, provider);

    try {
        const wallet = new ethers.Wallet(data.privateKey, provider);
        const connectedContract = contract.connect(wallet);

        console.log(`B·∫Øt ƒë·∫ßu claim LOL`);
        try {
            const tx = await connectedContract.claim();
            console.log(`Transaction hash: ${tx.hash}`);
            await tx.wait();
        } catch (error) {
            console.log(colors.red(`Claim th·∫•t b·∫°i: ${error.message}`));
        }

        console.log(colors.green(`Claim th√†nh c√¥ng 100000.0 LOL`));
    } catch (error) {
        console.log(colors.red(`Claim th·∫•t b·∫°i: ${error.message}`));
    }
    console.log("-----------------------------------");
}

async function transfer(data, parentWalletAddress) {
    const CONTRACT_ADDRESS = "0xB2174052dd2F3FCAB9Ba622F2e04FBEA13fc0dFC";

    const ABI = [
        "function balanceOf(address owner) view returns (uint256)",
        "function transfer(address to, uint256 value) returns (bool)",
    ];
    const contract = new ethers.Contract(CONTRACT_ADDRESS, ABI, provider);

    let walletAddress = "";
    try {
        const wallet = new ethers.Wallet(data.privateKey, provider).connect(
            provider
        );

        walletAddress = wallet.address;
        const balance = await contract.balanceOf(walletAddress);
        if (balance > 0) {
            const formattedBalance = ethers.formatUnits(balance, 18);
            console.log(
                `C√≥ ${formattedBalance} LOL trong v√≠, b·∫Øt ƒë·∫ßu chuy·ªÉn v·ªÅ v√≠ v·ªá tinh`
            );

            const connectedContract = contract.connect(wallet);

            // Th·ª±c hi·ªán chuy·ªÉn token v·ªÅ v√≠ m·∫π
            const tx = await connectedContract.transfer(
                parentWalletAddress,
                balance
            );
            console.log(`Transaction hash: ${tx.hash}`);
            await tx.wait();
            console.log(
                colors.green(
                    `ƒê√£ g·ª≠i ${ethers.formatUnits(
                        balance,
                        18
                    )} LOL v·ªÅ v√≠ v·ªá tinh th√†nh c√¥ng`
                )
            );
        } else {
            console.log(`V√≠ ${walletAddress} kh√¥ng c√≥ LOL token`);
        }
    } catch (error) {
        if (
            error.message.includes(
                "insufficient funds for intrinsic transaction cost"
            )
        ) {
            console.log(
                colors.red(
                    `L·ªói khi x·ª≠ l√Ω v√≠ ${walletAddress}:`,
                    "Kh√¥ng ƒë·ªß ph√≠ Gas"
                )
            );
        } else {
            console.log(
                colors.red(`L·ªói khi x·ª≠ l√Ω v√≠ ${walletAddress}:`, error.message)
            );
        }
    }
    console.log(
        "====================================================================================="
    );
}

console.log("");
console.log(colors.blue("üì¢ Th√¥ng b√°o t·ª´ h·ªá th·ªëng LDC"));
console.log("Ch∆°i t·∫ßm ch·ª•c ƒë√¥ cho vui th√¥i, ƒë·ª´ng ham nh√© anh em!");
console.log("");
console.log("");

let countOk = 0;
while (countOk < COUNT) {
    countOk++;
    console.log(colors.magenta(`L·∫ßn ch·∫°y th·ª©: ${countOk}`));
    try {
        const data = create();
        await send(data, PRIVATE_KEY, AMOUNT_SEND);
        await claim(data);
        await transfer(data, PARENT_WALLET_ADDRESS);
        console.log("success");
    } catch (error) {
        console.log("error", error);
    }
}
